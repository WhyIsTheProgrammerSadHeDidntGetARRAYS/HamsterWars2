@inject IHttpRequestService httpService;
@page "/history"

@if (AllHamsterMatches != null)
{
    <RadzenGrid AllowPaging="true"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            PageSize="10"
            Data="@AllHamsterMatches"
            TItem="@MatchResultsDto"
            ColumnWidth="300px">

        <Columns>
            <RadzenGridColumn TItem="@MatchResultsDto" Property="MatchId" Title="Match Id"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultsDto" Property="AllHamsterMatches.WinningHamster.Name" Title="Winners"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultsDto" Property="AllHamsterMatches.LosingHamster.Name" Title="Losers"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultsDto" Property="AllHamsterMatches.TimeStamp" Title="Match Date"></RadzenGridColumn>
            <AuthorizeView>
                <Authorized>
                    <RadzenGridColumn TItem="@MatchResultsDto" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="result">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Click="() => DeleteMatchRow(result.MatchId)">Delete</RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Authorized>
            </AuthorizeView>
        </Columns>

    </RadzenGrid>
}


@code {

    private IEnumerable<MatchResultsDto> AllHamsterMatches { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllHamsterMatches = await httpService.GetHamsterMatchesAsync();
    }

    private async Task DeleteMatchRow(int id)
    {
        await httpService.DeleteMatchRow(id);
        await OnInitializedAsync();
    }
}