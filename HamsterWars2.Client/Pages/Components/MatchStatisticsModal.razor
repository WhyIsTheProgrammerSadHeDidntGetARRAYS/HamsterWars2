@inject IHttpRequestService httpService;

@if (DefeatedHamsters != null)
{
    <div class="modal fade show" id="myModal" style="display: block; background-color: rgba(10, 10, 10, .8)" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Title</h4>
                </div>
                <div class="modal-body">
                    <ul>
                        @foreach (var losingHamster in DefeatedHamsters)
                        {
                            <li>@losingHamster.Name</li>
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" @onclick="ModalCancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private IEnumerable<HamsterDto> DefeatedHamsters { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DefeatedHamsters = await httpService.GetSpecificHamsterMatchData(Id);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOpen()
    {
        return OnClose.InvokeAsync(true);
    }
}