@page "/login"
@inject IAuthenticationService authService;
@inject NavigationManager navigationManager;


<PageTitle>Login</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <div class="container">
    
    @if (authError)
    {
        <div class="alert alert-danger">
            <p>@authenticationErrorText</p>
        </div>
    }
    <div class="col-md-4 offset-md-3 mt-5">
        <div class="card">
            <h4 class="card-header">Log in</h4>
            <div class="card-body">
                <EditForm Model="@UserAuth" OnValidSubmit="HandleValidLogin" Context="byternamnfördetblirkonfliktmedauthviewCONTEXTchildcomponent">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label>Username</label>
                        <InputText @bind-Value="UserAuth.Username" class="form-control" />
                        <ValidationMessage For="@(() => UserAuth.Username)" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="UserAuth.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => UserAuth.Password)" />
                    </div>
                    <br />
                    <button class="btn btn-primary" type="submit">
                        Login
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
    </NotAuthorized>
    <Authorized>
        @*har bara en fast roll just nu, då jag lägger till alla som admin, men ett exempel för att kolla om rollerna parsas ordentligt*@
        @if (context.User.IsInRole("Admin"))
        {
            <h1>You are logged in as an administrator</h1>
        }
        else
        {
            <h1>You are already logged in</h1>
        }
    </Authorized>
</AuthorizeView>




@code {
    private UserAuthenticationDto UserAuth = new();
    private bool authError { get; set; }
    private string authenticationErrorText = "";

    private async Task HandleValidLogin()
    {
        var token = await authService.Login(UserAuth);

        if (token != null)
        {
            authError = false;
            navigationManager.NavigateTo("/"); 
        }
        else
        {
            authError = true;
            authenticationErrorText = "There was an error when trying to log in.";
        }
    }
}