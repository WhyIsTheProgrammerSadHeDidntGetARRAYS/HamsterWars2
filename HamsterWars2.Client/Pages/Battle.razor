@page "/battle";
@inject IHttpRequestService _service;
@inject NavigationManager navManager;

<PageTitle>Battle</PageTitle>

<div class="battle-text">
    <h1 class="battle-title">Battle</h1>
</div>

@if (HamsterOne != null && HamsterTwo != null)
{
    <div class="container1">
        <div class="photo-gallery">
            <div class="place">
                <HamsterCardBattle ImageLink="@HamsterOne.ImageUrl" HamsterName="@HamsterOne.Name">
                    <ChildContent>
                        <button class="btn btn-primary" disabled=@IsTaskRunning @onclick="() => MatchComplete(HamsterOne)">VOTE</button>
                    </ChildContent>
                </HamsterCardBattle>
            </div>
            <div class="place">
                <HamsterCardBattle ImageLink="@HamsterTwo.ImageUrl" HamsterName="@HamsterTwo.Name">
                    <ChildContent>
                        <button class="btn btn-primary" disabled=@IsTaskRunning @onclick="() => MatchComplete(HamsterTwo)">VOTE</button>
                    </ChildContent>
                </HamsterCardBattle>
            </div>
        </div>
        @if (IsBattleDone)
        {
            <div class="btn-start-new-battle">
                <button class="btn btn-primary" @onclick="StartNewBattle">Start new battle</button>
            </div>
        }
    </div>
}

@code {

    private HamsterDto HamsterOne { get; set; }
    private HamsterDto HamsterTwo { get; set; }

    private bool IsBattleDone = false;
    private bool IsTaskRunning = false;

    protected override async Task OnInitializedAsync()
    {
        // HTTP-Requests, fast denna gången med felhantering
        HamsterOne = await _service.GetRandomHamsterAsync();
        HamsterTwo = await _service.GetRandomHamsterAsync();

        while (HamsterTwo.Id == HamsterOne.Id)
        {
            HamsterTwo = await _service.GetRandomHamsterAsync();
        }
    }
    private async Task MatchComplete(HamsterDto hamster)
    {
        if (hamster.Id == HamsterOne.Id)
        {
            await _service.VoteForHamster(new MatchCompletedDto { HamsterCompetitor = HamsterOne, MatchWon = true });
            await _service.VoteForHamster(new MatchCompletedDto { HamsterCompetitor = HamsterTwo, MatchWon = false });
            await _service.RegisterMatchData(new MatchDataDto { WinnerId = HamsterOne.Id, LoserId = HamsterTwo.Id, TimeStamp = DateTime.Now });
        }
        else
        {
            await _service.VoteForHamster(new MatchCompletedDto { HamsterCompetitor = HamsterTwo, MatchWon = true });
            await _service.VoteForHamster(new MatchCompletedDto { HamsterCompetitor = HamsterOne, MatchWon = false });
            await _service.RegisterMatchData(new MatchDataDto { WinnerId = HamsterTwo.Id, LoserId = HamsterOne.Id, TimeStamp = DateTime.Now });
        }
        IsTaskRunning = true;
        IsBattleDone = true;
    }

    private async Task StartNewBattle()
    {
        await OnInitializedAsync();
        IsBattleDone = false;
        IsTaskRunning = false;
    }
}